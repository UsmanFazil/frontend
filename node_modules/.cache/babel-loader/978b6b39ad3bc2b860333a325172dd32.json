{"remainingRequest":"/Users/usmanfazil/Git_clones/notary-front/node_modules/babel-loader/lib/index.js!/Users/usmanfazil/Git_clones/notary-front/node_modules/eslint-loader/index.js??ref--13-0!/Users/usmanfazil/Git_clones/notary-front/src/store/store.js","dependencies":[{"path":"/Users/usmanfazil/Git_clones/notary-front/src/store/store.js","mtime":1555254467584},{"path":"/Users/usmanfazil/Git_clones/notary-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/usmanfazil/Git_clones/notary-front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/usmanfazil/Git_clones/notary-front/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport Vuex from 'vuex';\nimport VuexPersist from 'vuex-persist';\nimport userdata from './modules/user.js';\nimport picupload from './modules/picupload';\nimport flag from './modules/flag.js';\nimport file_avalible from './modules/fileavalible.js';\nimport contractfile from './modules/contract';\nVue.use(Vuex);\nvar vuexLocalStorage = new VuexPersist({\n  key: 'vuex',\n  // The key to store the state on in the storage provider.\n  storage: window.localStorage // or window.sessionStorage or localForage\n  // Function that passes the state and returns the state with only the objects you want to store.\n  // reducer: state => state,\n  // Function that passes a mutation and lets you decide if it should update the state in localStorage.\n  // filter: mutation => (true)\n\n});\nexport var store = new Vuex.Store({\n  state: {\n    count: 0,\n    value: '',\n    imagevalue: ''\n  },\n  plugins: [vuexLocalStorage.plugin],\n  mutations: {\n    increment: function increment(state) {\n      return state.count++;\n    },\n    decrement: function decrement(state) {\n      return state.count--;\n    },\n    updateValue: function updateValue(state, payload) {\n      state.value = payload;\n    },\n    setimage: function setimage(state, payload) {\n      state.imagevalue = payload;\n    }\n  },\n  getters: {\n    getvalue: function getvalue(state) {\n      return state.value;\n    },\n    getimage: function getimage(state) {\n      return state.imagevalue;\n    }\n  },\n  actions: {\n    updateValue: function updateValue(_ref, payload) {\n      var commit = _ref.commit;\n      commit('updateValue', payload);\n    },\n    updateImage: function updateImage(_ref2, payload) {\n      var commit = _ref2.commit;\n      commit('setimage', payload);\n    }\n  },\n  modules: {\n    userdata: userdata,\n    flag: flag,\n    picupload: picupload,\n    file_avalible: file_avalible,\n    contractfile: contractfile\n  }\n});",{"version":3,"sources":["/Users/usmanfazil/Git_clones/notary-front/src/store/store.js"],"names":["Vue","Vuex","VuexPersist","userdata","picupload","flag","file_avalible","contractfile","use","vuexLocalStorage","key","storage","window","localStorage","store","Store","state","count","value","imagevalue","plugins","plugin","mutations","increment","decrement","updateValue","payload","setimage","getters","getvalue","getimage","actions","commit","updateImage","modules"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AAKAP,GAAG,CAACQ,GAAJ,CAAQP,IAAR;AAEA,IAAMQ,gBAAgB,GAAG,IAAIP,WAAJ,CAAgB;AACrCQ,EAAAA,GAAG,EAAE,MADgC;AACxB;AACbC,EAAAA,OAAO,EAAEC,MAAM,CAACC,YAFqB,CAEP;AAC9B;AACA;AACA;AACA;;AANqC,CAAhB,CAAzB;AAUA,OAAO,IAAMC,KAAK,GAAG,IAAIb,IAAI,CAACc,KAAT,CAAe;AAChCC,EAAAA,KAAK,EAAE;AACHC,IAAAA,KAAK,EAAE,CADJ;AAEHC,IAAAA,KAAK,EAAC,EAFH;AAGHC,IAAAA,UAAU,EAAC;AAHR,GADyB;AAQhCC,EAAAA,OAAO,EAAE,CAACX,gBAAgB,CAACY,MAAlB,CARuB;AAUhCC,EAAAA,SAAS,EAAE;AACPC,IAAAA,SAAS,EAAE,mBAAAP,KAAK;AAAA,aAAIA,KAAK,CAACC,KAAN,EAAJ;AAAA,KADT;AAEPO,IAAAA,SAAS,EAAE,mBAAAR,KAAK;AAAA,aAAIA,KAAK,CAACC,KAAN,EAAJ;AAAA,KAFT;AAGPQ,IAAAA,WAAW,EAAC,qBAACT,KAAD,EAAOU,OAAP,EAAiB;AAC3BV,MAAAA,KAAK,CAACE,KAAN,GAAcQ,OAAd;AACD,KALM;AAOPC,IAAAA,QAAQ,EAAC,kBAACX,KAAD,EAAOU,OAAP,EAAiB;AACxBV,MAAAA,KAAK,CAACG,UAAN,GAAmBO,OAAnB;AACD;AATM,GAVqB;AAsBhCE,EAAAA,OAAO,EAAC;AACNC,IAAAA,QAAQ,EAAE,kBAAAb,KAAK,EAAG;AAChB,aAAOA,KAAK,CAACE,KAAb;AACD,KAHK;AAINY,IAAAA,QAAQ,EAAE,kBAAAd,KAAK,EAAG;AAChB,aAAOA,KAAK,CAACG,UAAb;AACD;AANK,GAtBwB;AA+BhCY,EAAAA,OAAO,EAAC;AAENN,IAAAA,WAFM,6BAEeC,OAFf,EAEuB;AAAA,UAAhBM,MAAgB,QAAhBA,MAAgB;AAC3BA,MAAAA,MAAM,CAAC,aAAD,EAAeN,OAAf,CAAN;AACD,KAJK;AAMNO,IAAAA,WANM,8BAMeP,OANf,EAMuB;AAAA,UAAhBM,MAAgB,SAAhBA,MAAgB;AAC3BA,MAAAA,MAAM,CAAC,UAAD,EAAYN,OAAZ,CAAN;AACD;AARK,GA/BwB;AA2ChCQ,EAAAA,OAAO,EAAC;AACN/B,IAAAA,QAAQ,EAARA,QADM;AAENE,IAAAA,IAAI,EAAJA,IAFM;AAGND,IAAAA,SAAS,EAATA,SAHM;AAINE,IAAAA,aAAa,EAAbA,aAJM;AAKNC,IAAAA,YAAY,EAAZA;AALM;AA3CwB,CAAf,CAAd","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport VuexPersist from 'vuex-persist';\nimport userdata from './modules/user.js';\nimport picupload from './modules/picupload'\nimport flag from './modules/flag.js'\nimport file_avalible from './modules/fileavalible.js'\nimport contractfile from './modules/contract'\n\n\n\n\nVue.use(Vuex)\n\nconst vuexLocalStorage = new VuexPersist({\n    key: 'vuex', // The key to store the state on in the storage provider.\n    storage: window.localStorage, // or window.sessionStorage or localForage\n    // Function that passes the state and returns the state with only the objects you want to store.\n    // reducer: state => state,\n    // Function that passes a mutation and lets you decide if it should update the state in localStorage.\n    // filter: mutation => (true)\n  })\n\n\nexport const store = new Vuex.Store({\n    state: {\n        count: 0,\n        value:'',\n        imagevalue:''\n       \n      },\n\n    plugins: [vuexLocalStorage.plugin],\n    \n    mutations: {\n        increment: state => state.count++,\n        decrement: state => state.count--,\n        updateValue:(state,payload)=>{\n          state.value = payload\n        },\n\n        setimage:(state,payload)=>{\n          state.imagevalue = payload\n        }\n      },\n\n    getters:{\n      getvalue: state =>{\n        return state.value\n      }, \n      getimage: state =>{\n        return state.imagevalue\n      }\n    },\n\n    actions:{\n\n      updateValue({commit},payload){\n        commit('updateValue',payload)\n      },\n\n      updateImage({commit},payload){\n        commit('setimage',payload)\n      }\n\n    },\n\n    modules:{\n      userdata,\n      flag,\n      picupload,\n      file_avalible,\n      contractfile\n  }\n\n\n\n})"]}]}