{"remainingRequest":"/Users/usmanfazil/Git_clones/notary-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/usmanfazil/Git_clones/notary-front/src/components/auth/signup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/usmanfazil/Git_clones/notary-front/src/components/auth/signup.vue","mtime":1555254467572},{"path":"/Users/usmanfazil/Git_clones/notary-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/usmanfazil/Git_clones/notary-front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/usmanfazil/Git_clones/notary-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/usmanfazil/Git_clones/notary-front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport {\n  required,\n  email,\n  numeric,\n  minLength,  \n  sameAs,\n  maxLength,\n  alpha,\n  alphaNum,\n\n} from \"vuelidate/lib/validators\";\n\nimport verification from './verficationscreen.vue'\n\n\nexport default {\n\n  // data and variables\n  data() {\n    return {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      company: \"\",\n      terms:false,\n      number:'',\n      exist: false,\n      globalname: true,\n      errors:[],\n      nextroute:false\n\n\n    };\n  },\n\n\n    // validations\n    validations: {\n    email: {\n      required,\n      email,  \n    },\n\n    password: {\n    required,\n    minLen: minLength(8)\n    },\n\n    company:{\n        required,\n        minLen:minLength(3)\n    },\n\n    confirmPassword: {\n    sameAs: sameAs(vm => {\n    return vm.password\n    })\n    },\n\n    terms: {\n    required\n    },\n\n    number: {\n        required,\n        numeric,\n        minLen: minLength(8),\n        maxLen: maxLength(15)\n        \n      },\n\n    firstname:{\n      required,\n      alpha\n    },\n\n    lastname:{\n      required,\n      alpha\n    }\n  },\n\n    // components\n    components:{\n        verification\n    },\n\n\n    // methods\n  methods: {\n\n    loginEnter() {\n        console.log(this.$v.invalid);\n        this.$router.push(\"/home\");\n    },\n    \n    onSubmit() {\n          \n      if(!this.$v.$invalid){\n        this.$http.post('http://localhost:8000/signup', {\"email\": this.email,\n            \"password\":this.password,\n            \"name\": this.name,\n            \"company\":this.company,\n            \"phone\":this.number\n            })\n        .then(response => {\n            \n            if(response.status ==200){\n              console.log(this)\n              this.nextroute = true;\n              this.$router.push(\"/verify\")\n              localStorage.setItem(\"email\",this.email)\n              console.log(\"chal gyaa code\")\n            }\n            else{\n              console.log(response)\n            }\n            \n\n            },\n           error => {\n             console.log(error.bodyText)\n            if(error.body == \"EMAIL_ALREADY_EXISTS\"){\n                this.email= true;\n                // this.exist = true;\n                setTimeout((()=>this.exist = false),1000)\n            }\n            this.errors.push(error.body)\n            console.log(error.body)\n\n        });\n      }\n       \n\n      // console.log(\"mein chal rhaa hn naa mein so rae hn mein\")\n    \n\n\n    },\n\n    existchange(){\n      this.exist = false;\n    }\n  },\n\n  computed:{\n    flag:function(){\n      if (/\\s/.test(this.$v.email.$model)) {\n        return true\n        }\n      else{\n        return false\n      }\n      \n    },\n\n    name:function(){\n      return this.Fname +\" \"+  this.Lname;\n    },\n\n    showresponse:function(){\n\n    },\n\n    Fname:function(){\n      return this.firstname.trim();\n    },\n    Lname:function(){\n      return this.lastname.trim()\n    },\n\n    emailexist:function(){\n        return this.exist\n    }\n  },\n\n  // beforeRouteLeave(to,from,next){\n  //   console.log(to)\n  //   next(false)\n  // }\n\n \n};\n",{"version":3,"sources":["signup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA","file":"signup.vue","sourceRoot":"src/components/auth","sourcesContent":["                    <template>\n                        <div>\n                        <div v-if=\"globalname\" class=\"row row-set\">\n                        <div class=\"col-md-4 col-lg-4 col-sm-6 col-xs-12\">\n                            <!-- {{$v.$invalid}} -->\n                        </div>\n                          <!-- this is awesome time -->\n                        <div  class=\"col-md-4 col-lg-4 col-sm-6 col-xs-12\"  >\n                              <div>\n                                  <h3>Sign Up</h3>\n\n                                  \n                              \n                                  <transition v-if=\"exist\" name=\"fade\">\n                                  <div   class=\"alert alert-info\" transition=\"expand\">{{u}}</div>\n                                  </transition>\n                              \n                                  <form @submit.prevent=\"onSubmit\">\n                                  <div class=\"row\">\n                                  <div class=\"col-6\">\n                                    <input type=\"text\" class=\"form-control\" @blur=\"$v.firstname.$touch()\"  v-model=\"firstname\" placeholder=\"First Name\" id=\"firstname\"> \n                                    <small v-if=\"!$v.firstname.alpha\" :class=\"{invalid:!$v.firstname.alpha}\">Spaces and numbers are not allowed</small>\n                                    </div>\n                                  <div class=\"col-6\">\n                                    <input type=\"text\" class=\"form-control\" @blur=\"$v.lastname.$touch()\"  v-model=\"lastname\" placeholder=\"Last Name\"> \n                                    <small v-if=\"!$v.firstname.alpha\" :class=\"{invalid:!$v.firstname.alpha}\">Spaces and numbers are not allowed</small>\n                                  </div>\n                                  \n                                  <!-- email validations -->\n                                  <div class=\"col-12\">  \n                                    <input type=\"email\" id=\"email\" \n                                    v-model=\"email\" \n                                    @blur=\"$v.email.$touch()\" @focus=\"existchange\"\n                                    class=\"form-control\" placeholder=\"Email\"> \n                                        <small v-if=\"flag\" class=\"invalid\"> Spaces are not allowed</small>\n                                        <small   :class=\"{invalid: true}\" v-if=\"!$v.email.required\">This field must not be empty.</small>\n                                        <small v-if=\"!$v.email.email\"  :class=\"{invalid:true}\">Provide a valid email like johndoe@domain.com</small>\n                                        </div>\n\n                                        <small class=\"error-msg\" v-if=\"emailexist\">email already exists</small>\n\n\n                                  <!-- company validation -->\n                                  <div class=\"col-12\">\n                                    <input type=\"text\" @blur=\"$v.company.$touch()\" v-model=\"company\" id=\"company\" class=\"form-control\" placeholder=\"Company\">\n                                    <small v-if=\"!$v.company.minLen\" :class=\"{invalid: !$v.company.minLen}\">Company name must be 3 character long</small>\n                                  </div>\n\n                                  <!-- phone no validations -->\n                                  <div class=\"col-12\">\n                                    <input type=\"text\" class=\"form-control\" @blur=\"$v.number.$touch()\" v-model=\"number\" placeholder=\"Phone no\">\n                                    <small v-if=\"!$v.number.minLen\" :class=\"{invalid:true}\">Phone number must be 8 digit long</small>\n                                  </div>\n\n                                  <!-- password validation regex required -->\n                                  <div class=\"col-12\"> \n                                    <input class=\"form-control\" v-model=\"password\" @blur=\"$v.password.$touch()\" type=\"password\" placeholder=\"Enter new password\">\n                                    <small class=\"UI-info\" v-if=\"!$v.password.minLen\" :class=\"{invalid:true}\">The password must be 8 character long</small>\n                                  </div>\n\n                                  <!-- confirm password validations -->\n                                  <div class=\"col-12\">\n                                    <input type=\"password\" v-model=\"confirmPassword\" @blur=\"$v.confirmPassword.$touch()\" class=\"form-control\" placeholder=\"Confirm password\">\n                                    <small v-if=\"!$v.confirmPassword.sameAs && $v.confirmPassword.$invalid\" :class=\"{invalid:true}\">The password does not match</small>\n                                  </div>\n\n                                  <!-- terms and condition validation -->\n                                  <div class=\"col-12 form-check\" :class=\"{termcondition:!$v.terms.$model}\" >\n                                    <input type=\"checkbox\" id=\"terms\" v-model=\"terms\" @change=\"$v.terms.$touch()\"   class=\"form-check-input\">Accept Terms and Conditions\n                                  </div>\n                                              \n                                  </div>\n                                  <button  :class=\"{disabled:$v.$invalid}\" type=\"submit\" >Create Your account</button>\n                                  <!--   -->\n                                  </form>                      \n                                  </div>\n\n                                    </div>                                    \n                                    <div class=\"col-md-4 col-lg-4 col-sm-6 col-xs-12\"> </div>\n                                </div>  \n\n                                   <!-- hdahjdajd -->\n                                  <verification v-if=\"!globalname\"></verification>\n\n                            </div>\n\n\n                    </template>\n\n    <script>\n\n    import {\n      required,\n      email,\n      numeric,\n      minLength,  \n      sameAs,\n      maxLength,\n      alpha,\n      alphaNum,\n\n    } from \"vuelidate/lib/validators\";\n\n    import verification from './verficationscreen.vue'\n\n\n    export default {\n\n      // data and variables\n      data() {\n        return {\n          firstname: \"\",\n          lastname: \"\",\n          email: \"\",\n          password: \"\",\n          confirmPassword: \"\",\n          company: \"\",\n          terms:false,\n          number:'',\n          exist: false,\n          globalname: true,\n          errors:[],\n          nextroute:false\n\n\n        };\n      },\n\n\n        // validations\n        validations: {\n        email: {\n          required,\n          email,  \n        },\n\n        password: {\n        required,\n        minLen: minLength(8)\n        },\n\n        company:{\n            required,\n            minLen:minLength(3)\n        },\n\n        confirmPassword: {\n        sameAs: sameAs(vm => {\n        return vm.password\n        })\n        },\n\n        terms: {\n        required\n        },\n\n        number: {\n            required,\n            numeric,\n            minLen: minLength(8),\n            maxLen: maxLength(15)\n            \n          },\n\n        firstname:{\n          required,\n          alpha\n        },\n\n        lastname:{\n          required,\n          alpha\n        }\n      },\n\n        // components\n        components:{\n            verification\n        },\n\n\n        // methods\n      methods: {\n\n        loginEnter() {\n            console.log(this.$v.invalid);\n            this.$router.push(\"/home\");\n        },\n        \n        onSubmit() {\n              \n          if(!this.$v.$invalid){\n            this.$http.post('http://localhost:8000/signup', {\"email\": this.email,\n                \"password\":this.password,\n                \"name\": this.name,\n                \"company\":this.company,\n                \"phone\":this.number\n                })\n            .then(response => {\n                \n                if(response.status ==200){\n                  console.log(this)\n                  this.nextroute = true;\n                  this.$router.push(\"/verify\")\n                  localStorage.setItem(\"email\",this.email)\n                  console.log(\"chal gyaa code\")\n                }\n                else{\n                  console.log(response)\n                }\n                \n\n                },\n               error => {\n                 console.log(error.bodyText)\n                if(error.body == \"EMAIL_ALREADY_EXISTS\"){\n                    this.email= true;\n                    // this.exist = true;\n                    setTimeout((()=>this.exist = false),1000)\n                }\n                this.errors.push(error.body)\n                console.log(error.body)\n\n            });\n          }\n           \n\n          // console.log(\"mein chal rhaa hn naa mein so rae hn mein\")\n        \n\n\n        },\n\n        existchange(){\n          this.exist = false;\n        }\n      },\n\n      computed:{\n        flag:function(){\n          if (/\\s/.test(this.$v.email.$model)) {\n            return true\n            }\n          else{\n            return false\n          }\n          \n        },\n\n        name:function(){\n          return this.Fname +\" \"+  this.Lname;\n        },\n\n        showresponse:function(){\n\n        },\n\n        Fname:function(){\n          return this.firstname.trim();\n        },\n        Lname:function(){\n          return this.lastname.trim()\n        },\n\n        emailexist:function(){\n            return this.exist\n        }\n      },\n\n      // beforeRouteLeave(to,from,next){\n      //   console.log(to)\n      //   next(false)\n      // }\n\n     \n    };\n    </script>\n\n                    <style scoped>\n    @import url(\"https://fonts.googleapis.com/css?family=Noto+Sans+SC\");\n\n    *{\n      scroll-behavior: unset;\n    }\n\n    .row {\n      text-align: center;\n      overflow: hidden;\n      margin: 0%;\n    }\n\n    .alert{\n      position: absolute;\n    }\n\n    h3 {\n      text-transform: uppercase;\n      font-family: \"Noto Sans SC\", sans-serif;\n    }\n\n    .container-fluid{\n      height: 100vh;\n      /* padding-top: 5%; */\n    }\n\n      .error-msg{\n                    color: #d03238;\n                    display: block;\n                    /* margin: 8px 0; */\n              }\n\n\n    button {\n      background-color: #ffce00;\n      border: #ffce00;\n      height: 3rem;\n      width: 15rem;\n      border-radius: 4px;\n      font-weight: bolder;\n      text-transform: uppercase;\n    }\n\n    form img, \n    form h3 {\n      text-align: center;\n    }\n\n    .termcondition{\n      color: #d03238;\n    }\n\n    .invalid {\n      text-align: left;\n      color: #d03238;\n      font-size: 12px;\n      display: block;\n    }\n\n    .disabled{\n        cursor: not-allowed;\n        background-color: #cccccc;\n    }\n\n    .inline{\n      text-align: left;\n      margin-left: 10%;\n\n    }\n\n    form div{\n      margin-top: 7px;\n      margin-bottom: 7px;\n\n    }\n\n    .invalid_checkbox{\n      color: red;\n    }\n\n    .row-set{\n     margin: 10px;\n    }\n\n\n\n    \n\n    </style>"]}]}